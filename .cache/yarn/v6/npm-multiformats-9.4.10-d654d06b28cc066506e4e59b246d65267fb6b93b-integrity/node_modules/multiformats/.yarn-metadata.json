{
  "manifest": {
    "name": "multiformats",
    "version": "9.4.10",
    "description": "Interface for multihash, multicodec, multibase and CID",
    "main": "./cjs/src/index.js",
    "types": "./types/index.d.ts",
    "scripts": {
      "build": "npm run build:js && npm run build:types",
      "build:js": "ipjs build --tests --main && npm run build:copy",
      "build:copy": "cp -a tsconfig.json src vendor test dist/ && rm -rf dist/test/ts-use",
      "build:types": "npm run build:copy && cd dist && tsc --build",
      "build:vendor": "npm run build:vendor:varint && npm run build:vendor:base-x",
      "build:vendor:varint": "npm_config_yes=true npx brrp -x varint > vendor/varint.js",
      "build:vendor:base-x": "npm_config_yes=true npx brrp -x @multiformats/base-x > vendor/base-x.js",
      "publish": "ipjs publish",
      "lint": "standard",
      "test:cjs": "npm run build:js && mocha dist/cjs/node-test/test-*.js && npm run test:cjs:browser",
      "test:node": "hundreds mocha test/test-*.js",
      "test:cjs:browser": "polendina --page --worker --serviceworker --cleanup dist/cjs/browser-test/test-*.js",
      "test:ts": "npm run build:types && npm run test --prefix test/ts-use",
      "test": "npm run lint && npm run test:node && npm run test:cjs && npm run test:ts",
      "test:node-v12": "mocha test/test-*.js && npm run test:cjs",
      "coverage": "c8 --reporter=html mocha test/test-*.js && npm_config_yes=true npx st -d coverage -p 8080"
    },
    "c8": {
      "exclude": [
        "test/**",
        "vendor/**"
      ]
    },
    "keywords": [
      "esm",
      "build"
    ],
    "author": {
      "name": "Mikeal Rogers",
      "email": "mikeal.rogers@gmail.com",
      "url": "https://www.mikealrogers.com/"
    },
    "license": "(Apache-2.0 AND MIT)",
    "exports": {
      ".": {
        "browser": "./esm/src/index.js",
        "require": "./cjs/src/index.js",
        "import": "./esm/src/index.js"
      },
      "./cid": {
        "browser": "./esm/src/cid.js",
        "require": "./cjs/src/cid.js",
        "import": "./esm/src/cid.js"
      },
      "./basics": {
        "browser": "./esm/src/basics.js",
        "require": "./cjs/src/basics.js",
        "import": "./esm/src/basics.js"
      },
      "./block": {
        "browser": "./esm/src/block.js",
        "require": "./cjs/src/block.js",
        "import": "./esm/src/block.js"
      },
      "./bases/identity": {
        "browser": "./esm/src/bases/identity.js",
        "require": "./cjs/src/bases/identity.js",
        "import": "./esm/src/bases/identity.js"
      },
      "./bases/base2": {
        "browser": "./esm/src/bases/base2.js",
        "require": "./cjs/src/bases/base2.js",
        "import": "./esm/src/bases/base2.js"
      },
      "./bases/base8": {
        "browser": "./esm/src/bases/base8.js",
        "require": "./cjs/src/bases/base8.js",
        "import": "./esm/src/bases/base8.js"
      },
      "./bases/base10": {
        "browser": "./esm/src/bases/base10.js",
        "require": "./cjs/src/bases/base10.js",
        "import": "./esm/src/bases/base10.js"
      },
      "./bases/base16": {
        "browser": "./esm/src/bases/base16.js",
        "require": "./cjs/src/bases/base16.js",
        "import": "./esm/src/bases/base16.js"
      },
      "./bases/base32": {
        "browser": "./esm/src/bases/base32.js",
        "require": "./cjs/src/bases/base32.js",
        "import": "./esm/src/bases/base32.js"
      },
      "./bases/base36": {
        "browser": "./esm/src/bases/base36.js",
        "require": "./cjs/src/bases/base36.js",
        "import": "./esm/src/bases/base36.js"
      },
      "./bases/base58": {
        "browser": "./esm/src/bases/base58.js",
        "require": "./cjs/src/bases/base58.js",
        "import": "./esm/src/bases/base58.js"
      },
      "./bases/base64": {
        "browser": "./esm/src/bases/base64.js",
        "require": "./cjs/src/bases/base64.js",
        "import": "./esm/src/bases/base64.js"
      },
      "./hashes/hasher": {
        "browser": "./esm/src/hashes/hasher.js",
        "require": "./cjs/src/hashes/hasher.js",
        "import": "./esm/src/hashes/hasher.js"
      },
      "./hashes/digest": {
        "browser": "./esm/src/hashes/digest.js",
        "require": "./cjs/src/hashes/digest.js",
        "import": "./esm/src/hashes/digest.js"
      },
      "./hashes/sha2": {
        "browser": "./esm/src/hashes/sha2-browser.js",
        "require": "./cjs/src/hashes/sha2.js",
        "import": "./esm/src/hashes/sha2.js"
      },
      "./hashes/identity": {
        "browser": "./esm/src/hashes/identity.js",
        "require": "./cjs/src/hashes/identity.js",
        "import": "./esm/src/hashes/identity.js"
      },
      "./codecs/json": {
        "browser": "./esm/src/codecs/json.js",
        "require": "./cjs/src/codecs/json.js",
        "import": "./esm/src/codecs/json.js"
      },
      "./codecs/raw": {
        "browser": "./esm/src/codecs/raw.js",
        "require": "./cjs/src/codecs/raw.js",
        "import": "./esm/src/codecs/raw.js"
      }
    },
    "devDependencies": {
      "@types/node": "^16.7.10",
      "@typescript-eslint/eslint-plugin": "^4.30.0",
      "@typescript-eslint/parser": "^4.30.0",
      "buffer": "^6.0.3",
      "c8": "^7.8.0",
      "cids": "^1.1.9",
      "hundreds": "^0.0.9",
      "ipjs": "^5.1.0",
      "mocha": "^9.1.1",
      "polendina": "^1.1.0",
      "standard": "^16.0.3",
      "typescript": "^4.4.2"
    },
    "standard": {
      "ignore": [
        "dist",
        "vendor"
      ]
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/multiformats/js-multiformats.git"
    },
    "bugs": {
      "url": "https://github.com/multiformats/js-multiformats/issues"
    },
    "homepage": "https://github.com/multiformats/js-multiformats#readme",
    "typesVersions": {
      "*": {
        "*": [
          "types/*"
        ],
        "types/*": [
          "types/*"
        ]
      }
    },
    "browser": {
      ".": "./cjs/src/index.js",
      "./cid": "./cjs/src/cid.js",
      "./basics": "./cjs/src/basics.js",
      "./block": "./cjs/src/block.js",
      "./bases/identity": "./cjs/src/bases/identity.js",
      "./bases/base2": "./cjs/src/bases/base2.js",
      "./bases/base8": "./cjs/src/bases/base8.js",
      "./bases/base10": "./cjs/src/bases/base10.js",
      "./bases/base16": "./cjs/src/bases/base16.js",
      "./bases/base32": "./cjs/src/bases/base32.js",
      "./bases/base36": "./cjs/src/bases/base36.js",
      "./bases/base58": "./cjs/src/bases/base58.js",
      "./bases/base64": "./cjs/src/bases/base64.js",
      "./hashes/hasher": "./cjs/src/hashes/hasher.js",
      "./hashes/digest": "./cjs/src/hashes/digest.js",
      "./hashes/sha2": "./cjs/src/hashes/sha2-browser.js",
      "./esm/src/hashes/sha2.js": "./esm/src/hashes/sha2-browser.js",
      "./cjs/src/hashes/sha2.js": "./cjs/src/hashes/sha2-browser.js",
      "./hashes/identity": "./cjs/src/hashes/identity.js",
      "./codecs/json": "./cjs/src/codecs/json.js",
      "./codecs/raw": "./cjs/src/codecs/raw.js"
    },
    "_registry": "npm",
    "_loc": "/home/deniska/.cache/yarn/v6/npm-multiformats-9.4.10-d654d06b28cc066506e4e59b246d65267fb6b93b-integrity/node_modules/multiformats/package.json",
    "readmeFilename": "README.md",
    "readme": "# multiformats\n\n* [Interfaces](#interfaces)\n  * [Creating Blocks](#creating-blocks)\n  * [Multibase Encoders / Decoders / Codecs](#multibase-encoders--decoders--codecs)\n  * [Multicodec Encoders / Decoders / Codecs](#multicodec-encoders--decoders--codecs)\n  * [Multihash Hashers](#multihash-hashers)\n* [Legacy interface](#legacy-interface)\n* [Implementations](#implementations)\n  * [Multibase codecs](#multibase-codecs)\n  * [Multihash hashers](#multihash-hashers-1)\n  * [IPLD codecs (multicodec)](#ipld-codecs-multicodec)\n* [License](#license)\n  * [Contribution](#contribution)\n\nThis library defines common interfaces and low level building blocks for various interrelated multiformat technologies (multicodec, multihash, multibase, and CID). They can be used to implement custom base encoders / decoders / codecs, codec encoders /decoders and multihash hashers that comply to the interface that layers above assume.\n\nThis library provides implementations for most basics and many others can be found in linked repositories.\n\n## Interfaces\n\n```js\nimport { CID } from 'multiformats/cid'\nimport * as json from 'multiformats/codecs/json'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\nconst bytes = json.encode({ hello: 'world' })\n\nconst hash = await sha256.digest(bytes)\nconst cid = CID.create(1, json.code, hash)\n//> CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)\n```\n\n### Creating Blocks\n\n```js\nimport * as Block from 'multiformats/block'\nimport * as codec from '@ipld/dag-cbor'\nimport { sha256 as hasher } from 'multiformats/hashes/sha2'\n\nconst value = { hello: 'world' }\n\n// encode a block\nlet block = await Block.encode({ value, codec, hasher })\n\nblock.value // { hello: 'world' }\nblock.bytes // Uint8Array\nblock.cid   // CID() w/ sha2-256 hash address and dag-cbor codec\n\n// you can also decode blocks from their binary state\nblock = await Block.decode({ bytes: block.bytes, codec, hasher })\n\n// if you have the cid you can also verify the hash on decode\nblock = await Block.create({ bytes: block.bytes, cid: block.cid, codec, hasher })\n```\n\n### Multibase Encoders / Decoders / Codecs\n\nCIDs can be serialized to string representation using multibase encoders that implement [`MultibaseEncoder`](https://github.com/multiformats/js-multiformats/blob/master/src/bases/interface.ts) interface. This library provides quite a few implementations that can be imported:\n\n```js\nimport { base64 } from \"multiformats/bases/base64\"\ncid.toString(base64.encoder)\n//> 'mAYAEEiCTojlxqRTl6svwqNJRVM2jCcPBxy+7mRTUfGDzy2gViA'\n```\n\nParsing CID string serialized CIDs requires multibase decoder that implements [`MultibaseDecoder`](https://github.com/multiformats/js-multiformats/blob/master/src/bases/interface.ts) interface. This library provides a decoder for every encoder it provides:\n\n```js\nCID.parse('mAYAEEiCTojlxqRTl6svwqNJRVM2jCcPBxy+7mRTUfGDzy2gViA', base64.decoder)\n//> CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)\n```\n\nDual of multibase encoder & decoder is defined as multibase codec and it exposes\nthem as `encoder` and `decoder` properties. For added convenience codecs also\nimplement `MultibaseEncoder` and `MultibaseDecoder` interfaces so they could be\nused as either or both:\n\n\n```js\ncid.toString(base64)\nCID.parse(cid.toString(base64), base64)\n```\n\n**Note:** CID implementation comes bundled with `base32` and `base58btc`\nmultibase codecs so that CIDs can be base serialized to (version specific)\ndefault base encoding and parsed without having to supply base encoders/decoders:\n\n```js\nconst v1 = CID.parse('bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea')\nv1.toString()\n//> 'bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea'\n\nconst v0 = CID.parse('QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n')\nv0.toString()\n//> 'QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n'\nv0.toV1().toString()\n//> 'bafybeihdwdcefgh4dqkjv67uzcmw7ojee6xedzdetojuzjevtenxquvyku'\n```\n\n### Multicodec Encoders / Decoders / Codecs\n\nThis library defines [`BlockEncoder`, `BlockDecoder` and `BlockCodec` interfaces](https://github.com/multiformats/js-multiformats/blob/master/src/codecs/interface.ts). Codec implementations should conform to the `BlockCodec` interface which implements both `BlockEncoder` and `BlockDecoder`.\n\n```js\n/**\n * @template T\n * @type {BlockCodec<0x0200, T>}\n */\nexport const { name, code, encode, decode } = {\n  name: 'json',\n  code: 0x0200,\n  encode: json => new TextEncoder().encode(JSON.stringify(json)),\n  decode: bytes => JSON.parse(new TextDecoder().decode(bytes))\n}\n```\n\n### Multihash Hashers\n\nThis library defines [`MultihashHasher` and `MultihashDigest` interfaces](https://github.com/multiformats/js-multiformats/blob/master/src/hashes/interface.ts) and convinient function for implementing them:\n\n```js\nimport * as hasher from 'multiformats/hashes/hasher')\n\nconst sha256 = hasher.from({\n  // As per multiformats table\n  // https://github.com/multiformats/multicodec/blob/master/table.csv#L9\n  name: 'sha2-256',\n  code: 0x12,\n\n  encode: (input) => new Uint8Array(crypto.createHash('sha256').update(input).digest())\n})\n\nconst hash = await sha256.digest(json.encode({ hello: 'world' }))\nCID.create(1, json.code, hash)\n\n//> CID(bagaaierasords4njcts6vs7qvdjfcvgnume4hqohf65zsfguprqphs3icwea)\n```\n\n## Legacy interface\n\n[`blockcodec-to-ipld-format`](https://github.com/ipld/js-blockcodec-to-ipld-format) converts a multiformats [`BlockCodec`](https://github.com/multiformats/js-multiformats/blob/master/src/codecs/interface.ts#L21) into an\n[`interface-ipld-format`](https://github.com/ipld/interface-ipld-format) for use with the [`ipld`](https://github.com/ipld/ipld) package. This can help bridge IPLD codecs implemented using the structure and interfaces defined here to existing code that assumes, or requires `interface-ipld-format`. This bridge also includes the relevant TypeScript definitions.\n\n## Implementations\n\nBy default, no base encodings (other than base32 & base58btc), hash functions,\nor codec implementations are included exposed by `multiformats`, you need to\nimport the ones you need yourself.\n\n### Multibase codecs\n\n| bases | import | repo |\n --- | --- | --- |\n`base16` | `multiformats/bases/base16` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n`base32`, `base32pad`, `base32hex`, `base32hexpad`, `base32z` | `multiformats/bases/base32` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n`base64`, `base64pad`, `base64url`, `base64urlpad` | `multiformats/bases/base64` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n`base58btc`, `base58flick4` | `multiformats/bases/base58` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/bases) |\n\n### Multihash hashers\n\n| hashes | import | repo |\n| --- | --- | --- |\n| `sha2-256`, `sha2-512` | `multiformats/hashes/sha2` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/hashes) |\n| `sha3-224`, `sha3-256`, `sha3-384`,`sha3-512`, `shake-128`, `shake-256`, `keccak-224`, `keccak-256`, `keccak-384`, `keccak-512` | `@multiformats/sha3` | [multiformats/js-sha3](https://github.com/multiformats/js-sha3) |\n| `identity` | `multiformats/hashes/identity` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/hashes/identity.js) |\n| `murmur3-128`, `murmur3-32` | `@multiformats/murmur3` | [multiformats/js-murmur3](https://github.com/multiformats/js-murmur3) |\n| `blake2b-*`, `blake2s-*` | `@multiformats/blake2` | [multiformats/js-blake2](https://github.com/multiformats/js-blake2) |\n\n### IPLD codecs (multicodec)\n\n| codec | import | repo |\n| --- | --- | --- |\n| `raw` | `multiformats/codecs/raw` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/codecs) |\n| `json` | `multiformats/codecs/json` | [multiformats/js-multiformats](https://github.com/multiformats/js-multiformats/tree/master/src/codecs) |\n| `dag-cbor` | `@ipld/dag-cbor` | [ipld/js-dag-cbor](https://github.com/ipld/js-dag-cbor) |\n| `dag-json` | `@ipld/dag-json` | [ipld/js-dag-json](https://github.com/ipld/js-dag-json) |\n| `dag-pb` | `@ipld/dag-pb` | [ipld/js-dag-pb](https://github.com/ipld/js-dag-pb) |\n| `dag-jose` | `dag-jose`| [ceramicnetwork/js-dag-jose](https://github.com/ceramicnetwork/js-dag-jose) |\n\n## License\n\nLicensed under either of\n\n * Apache 2.0, ([LICENSE-APACHE](LICENSE-APACHE) / http://www.apache.org/licenses/LICENSE-2.0)\n * MIT ([LICENSE-MIT](LICENSE-MIT) / http://opensource.org/licenses/MIT)\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/multiformats/-/multiformats-9.4.10.tgz#d654d06b28cc066506e4e59b246d65267fb6b93b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/multiformats/-/multiformats-9.4.10.tgz",
    "hash": "d654d06b28cc066506e4e59b246d65267fb6b93b",
    "integrity": "sha512-BwWGvgqB/5J/cnWaOA0sXzJ+UGl+kyFAw3Sw1L6TN4oad34C9OpW+GCpYTYPDp4pUaXDC1EjvB3yv9Iodo1EhA==",
    "registry": "npm",
    "packageName": "multiformats",
    "cacheIntegrity": "sha512-BwWGvgqB/5J/cnWaOA0sXzJ+UGl+kyFAw3Sw1L6TN4oad34C9OpW+GCpYTYPDp4pUaXDC1EjvB3yv9Iodo1EhA== sha1-1lTQayjMBmUG5OWbJG1lJn+2uTs="
  },
  "registry": "npm",
  "hash": "d654d06b28cc066506e4e59b246d65267fb6b93b"
}