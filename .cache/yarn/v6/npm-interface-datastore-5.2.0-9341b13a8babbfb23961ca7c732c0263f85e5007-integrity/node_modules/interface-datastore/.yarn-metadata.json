{
  "manifest": {
    "name": "interface-datastore",
    "version": "5.2.0",
    "description": "datastore interface",
    "leadMaintainer": "Alex Potsides <alex.potsides@protocol.ai>",
    "main": "src/index.js",
    "types": "dist/src/index.d.ts",
    "files": [
      "src",
      "dist"
    ],
    "scripts": {
      "build": "aegir build",
      "lint": "aegir ts -p check && aegir lint",
      "test": "aegir test",
      "coverage": "aegir test --cov",
      "dep-check": "aegir dep-check -i interface-datastore-tests"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ipfs/js-ipfs-interfaces.git"
    },
    "keywords": [
      "interface",
      "key-value",
      "ipfs",
      "datastore"
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/ipfs/js-ipfs-interfaces/issues"
    },
    "homepage": "https://github.com/ipfs/js-ipfs-interfaces/tree/master/packages/interface-datastore#readme",
    "devDependencies": {
      "aegir": "^35.0.0",
      "it-map": "^1.0.5",
      "util": "^0.12.4"
    },
    "dependencies": {
      "err-code": "^3.0.1",
      "interface-store": "^1.0.2",
      "ipfs-utils": "^8.1.2",
      "it-all": "^1.0.2",
      "it-drain": "^1.0.1",
      "it-filter": "^1.0.2",
      "it-take": "^1.0.1",
      "nanoid": "^3.0.2",
      "uint8arrays": "^3.0.0"
    },
    "eslintConfig": {
      "extends": "ipfs"
    },
    "contributors": [
      {
        "name": "achingbrain",
        "email": "alex@achingbrain.net"
      },
      {
        "name": "David Dias",
        "email": "daviddias.p@gmail.com"
      },
      {
        "name": "Friedel Ziegelmayer",
        "email": "dignifiedquire@gmail.com"
      },
      {
        "name": "Juan Batiz-Benet",
        "email": "juan@benet.ai"
      },
      {
        "name": "Pedro Teixeira",
        "email": "i@pgte.me"
      },
      {
        "name": "Jacob Heun",
        "email": "jacobheun@gmail.com"
      },
      {
        "name": "Hugo Dias",
        "email": "hugomrdias@gmail.com"
      },
      {
        "name": "Vasco Santos",
        "email": "vasco.santos@moxy.studio"
      },
      {
        "name": "Hector Sanjuan",
        "email": "code@hector.link"
      },
      {
        "name": "Richard Schneider",
        "email": "makaretu@gmail.com"
      },
      {
        "name": "ᴠɪᴄᴛᴏʀ ʙᴊᴇʟᴋʜᴏʟᴍ",
        "email": "victorbjelkholm@gmail.com"
      },
      {
        "name": "Alan Shaw",
        "email": "alan.shaw@protocol.ai"
      },
      {
        "name": "Carson Farmer",
        "email": "carson.farmer@gmail.com"
      },
      {
        "name": "Erin Dachtler",
        "email": "download333@gmail.com"
      },
      {
        "name": "tcme",
        "email": "hi@this-connect.me"
      },
      {
        "name": "Adam Uhlir",
        "email": "adam@uhlir.dev"
      }
    ],
    "gitHead": "5ee20e65b1e441b0497908254e5c0c3c5364e899",
    "_registry": "npm",
    "_loc": "/home/deniska/.cache/yarn/v6/npm-interface-datastore-5.2.0-9341b13a8babbfb23961ca7c732c0263f85e5007-integrity/node_modules/interface-datastore/package.json",
    "readmeFilename": "README.md",
    "readme": "# interface-datastore <!-- omit in toc -->\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![codecov](https://img.shields.io/codecov/c/github/ipfs/interface-datastore.svg?style=flat-square)](https://codecov.io/gh/ipfs/interface-datastore)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/ipfs/interface-datastore/ci?label=ci&style=flat-square)](https://github.com/ipfs/interface-datastore/actions?query=branch%3Amaster+workflow%3Aci+)\n\n> Implementation of the [datastore](https://github.com/ipfs/go-datastore) interface in JavaScript\n\n## Lead Maintainer <!-- omit in toc -->\n\n[Alex Potsides](https://github.com/achingbrain)\n\n## Table of Contents <!-- omit in toc -->\n\n- [Implementations](#implementations)\n- [Adapter](#adapter)\n- [Install](#install)\n- [Usage](#usage)\n  - [Wrapping Stores](#wrapping-stores)\n  - [Test suite](#test-suite)\n  - [Aborting requests](#aborting-requests)\n  - [Concurrency](#concurrency)\n  - [Keys](#keys)\n- [API](#api)\n- [Contribute](#contribute)\n- [License](#license)\n\n## Implementations\n\n- Backed Implementations\n  - Memory: [`src/memory`](src/memory.js)\n  - level: [`datastore-level`](https://github.com/ipfs/js-datastore-level) (supports any levelup compatible backend)\n  - File System: [`datstore-fs`](https://github.com/ipfs/js-datastore-fs)\n- Wrapper Implementations\n  - Mount: [`datastore-core/src/mount`](https://github.com/ipfs/js-datastore-core/tree/master/src/mount.js)\n  - Keytransform: [`datstore-core/src/keytransform`](https://github.com/ipfs/js-datastore-core/tree/master/src/keytransform.js)\n  - Sharding: [`datastore-core/src/sharding`](https://github.com/ipfs/js-datastore-core/tree/master/src/sharding.js)\n  - Tiered: [`datstore-core/src/tiered`](https://github.com/ipfs/js-datastore-core/blob/master/src/tiered.js)\n  - Namespace: [`datastore-core/src/namespace`](https://github.com/ipfs/js-datastore-core/tree/master/src/namespace.js)\n\nIf you want the same functionality as [go-ds-flatfs](https://github.com/ipfs/go-ds-flatfs), use sharding with fs.\n\n```js\nconst FsStore = require('datastore-fs')\nconst ShardingStore = require('datastore-core').ShardingDatatstore\nconst NextToLast = require('datastore-core').shard.NextToLast\n\nconst fs = new FsStore('path/to/store')\n\n// flatfs now works like go-flatfs\nconst flatfs = await ShardingStore.createOrOpen(fs, new NextToLast(2))\n```\n\n## Adapter\n\nAn adapter is made available to make implementing your own datastore easier:\n\n```javascript\nconst { Adapter } = require('interface-datastore')\n\nclass MyDatastore extends Adapter {\n  constructor () {\n    super()\n  }\n\n  async put (key, val) {\n    // your implementation here\n  }\n\n  async get (key) {\n    // your implementation here\n  }\n\n  // etc...\n}\n```\n\nSee the [MemoryDatastore](./src/memory.js) for an example of how it is used.\n\n## Install\n\n```sh\n$ npm install interface-datastore\n```\n\n## Usage\n\n### Wrapping Stores\n\n```js\nconst MemoryStore = require('interface-datastore').MemoryDatastore\nconst MountStore = require('datastore-core').MountDatastore\nconst Key = require('interface-datastore').Key\n\nconst store = new MountStore({ prefix: new Key('/a'), datastore: new MemoryStore() })\n```\n\n### Test suite\n\nAvailable under [`src/tests.js`](src/tests.js)\n\n```js\ndescribe('mystore', () => {\n  require('interface-datastore/src/tests')({\n    async setup () {\n      return instanceOfMyStore\n    },\n    async teardown () {\n      // cleanup resources\n    }\n  })\n})\n```\n\n### Aborting requests\n\nMost API methods accept an [AbortSignal][] as part of an options object.  Implementations may listen for an `abort` event emitted by this object, or test the `signal.aborted` property. When received implementations should tear down any long-lived requests or resources created.\n\n### Concurrency\n\nThe streaming `(put|get|delete)Many` methods are intended to be used with modules such as [it-parallel-batch](https://www.npmjs.com/package/it-parallel-batch) to allow calling code to control levels of parallelisation.  The batching method ensures results are returned in the correct order, but interface implementations should be thread safe.\n\n```js\nconst batch = require('it-parallel-batch')\nconst source = [{\n  key: ..,\n  value: ..\n}]\n\n// put values into the datastore concurrently, max 10 at a time\nfor await (const { key, data } of batch(store.putMany(source), 10)) {\n  console.info(`Put ${key}`)\n}\n```\n\n### Keys\n\nTo allow a better abstraction on how to address values, there is a `Key` class which is used as identifier. It's easy to create a key from a `Uint8Array` or a `string`.\n\n```js\nconst a = new Key('a')\nconst b = new Key(new Uint8Array([0, 1, 2, 3]))\n```\n\nThe key scheme is inspired by file systems and Google App Engine key model. Keys are meant to be unique across a system. They are typically hierarchical, incorporating more and more specific namespaces. Thus keys can be deemed 'children' or 'ancestors' of other keys:\n\n- `new Key('/Comedy')`\n- `new Key('/Comedy/MontyPython')`\n\nAlso, every namespace can be parameterized to embed relevant object information. For example, the Key `name` (most specific namespace) could include the object type:\n\n- `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n- `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n- `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n\n## API\nhttps://ipfs.github.io/interface-datastore/\n\n## Contribute\n\nPRs accepted.\n\nSmall note: If editing the Readme, please conform to the [standard-readme](https://github.com/RichardLitt/standard-readme) specification.\n\n## License\n\nMIT 2017 © IPFS\n\n\n[Key]: #Keys\n[Object]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n[Uint8Array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[AbortSignal]: https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\n[AsyncIterator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\n[AsyncIterable]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n[String]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n[Array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n[Function]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n[Number]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n[Boolean]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "licenseText": "MIT License\n\nCopyright (c) 2017 IPFS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/interface-datastore/-/interface-datastore-5.2.0.tgz#9341b13a8babbfb23961ca7c732c0263f85e5007",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/interface-datastore/-/interface-datastore-5.2.0.tgz",
    "hash": "9341b13a8babbfb23961ca7c732c0263f85e5007",
    "integrity": "sha512-nthO4C4BMJM2j9x/mT2KFa/g/sbcY8yf9j/kOBgli3u5mq9ZdPvQyDxi0OhKzr4JmoM81OYh5xcFjyebquqwvA==",
    "registry": "npm",
    "packageName": "interface-datastore",
    "cacheIntegrity": "sha512-nthO4C4BMJM2j9x/mT2KFa/g/sbcY8yf9j/kOBgli3u5mq9ZdPvQyDxi0OhKzr4JmoM81OYh5xcFjyebquqwvA== sha1-k0GxOourv7I5Ycp8cywCY/heUAc="
  },
  "registry": "npm",
  "hash": "9341b13a8babbfb23961ca7c732c0263f85e5007"
}